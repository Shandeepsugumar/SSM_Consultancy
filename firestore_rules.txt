// Firestore Security Rules for Consultancy App - Corrected Version
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isSignedIn() {
      return request.auth != null;
    }

    // Admins collection is uppercase in code: collection("Admins")
    function isAdmin() {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/Admins/$(request.auth.uid));
    }

    // Resolve the employee's custom UID/EID from uid_mapping/{auth.uid}
    function hasUidMapping() {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/uid_mapping/$(request.auth.uid));
    }

    function getCustomUid() {
      return hasUidMapping()
        ? get(/databases/$(database)/documents/uid_mapping/$(request.auth.uid)).data.customUid
        : request.auth.uid; // fallback if mapping missing
    }

    // Helper to check if document ID matches user's Firebase UID or EID
    function isOwnLocationDoc(docId) {
      return isSignedIn() && (
        // Document ID is the user's Firebase UID
        docId == request.auth.uid ||
        // Document ID is the user's mapped EID
        docId == getCustomUid()
      );
    }

    // COLLECTION RULES

    // Admins
    match /Admins/{adminUid} {
      // Admin can read own admin record
      allow read: if isSignedIn() && request.auth.uid == adminUid;
      
      // Only existing admins can create/update/delete Admins documents
      allow create: if isAdmin() || (isSignedIn() && request.auth.uid == adminUid);
      allow update, delete: if isAdmin();
    }

    // Users collection - FIXED: Ensure admins can read all users
    match /users/{firebaseUid} {
      // Allow unauthenticated reads for login queries (email/phone lookup)
      allow read: if true;
      
      // The owner (Firebase UID) can write their own record
      allow write: if isSignedIn() && request.auth.uid == firebaseUid;

      // Admins can read/write all users - EXPLICITLY ALLOWED
      allow read, write: if isAdmin();
    }

    // UID Mapping collection
    match /uid_mapping/{firebaseUid} {
      // Allow reading uid_mapping for login flow
      allow read: if isSignedIn();
      
      // Allow creating uid_mapping during login
      allow create: if isSignedIn() && request.auth.uid == firebaseUid;
      
      // Admins can manage uid_mapping
      allow write: if isAdmin();
    }

    // Attendance (keyed by Firebase UID) - FIXED: More explicit rules
    match /attendance/{firebaseUid} {
      // Owner can read/write their own attendance
      allow read, write: if isSignedIn() && request.auth.uid == firebaseUid;

      // Admins can read/write all attendance - EXPLICITLY ALLOWED
      allow read, write: if isAdmin();

      // Dates subcollection
      match /dates/{dateId} {
        // Owner can read/write their own attendance dates
        allow read, write: if isSignedIn() && request.auth.uid == firebaseUid;
        
        // Admins can read/write all attendance dates - EXPLICITLY ALLOWED
        allow read, write: if isAdmin();
      }
    }

    // Live Locations - Handle both Firebase UID and EID document patterns
    match /live_locations/{docId} {
      // Owner can read/write their own location
      allow read, write: if isOwnLocationDoc(docId);

      // Admins can read/write all live locations
      allow read, write: if isAdmin();
    }

    // Schedule (admin-managed; employees read)
    match /schedule/{scheduleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Salary Records (keyed by EID)
    match /salary_records/{eid} {
      // Owner can read own salary
      allow read: if isSignedIn() && getCustomUid() == eid;

      // Admins can read/write all salary records
      allow read, write: if isAdmin();
    }

    // Location tracking records
    match /location_tracking/{docId} {
      // Owner can read/write only when eid matches their mapping
      allow read: if isSignedIn() &&
                  resource.data.eid == getCustomUid();

      allow create: if isSignedIn() &&
                    request.resource.data.eid == getCustomUid();

      allow update: if isSignedIn() &&
                    resource.data.eid == getCustomUid() &&
                    request.resource.data.eid == getCustomUid();

      // Admin full access
      allow read, write: if isAdmin();
    }

    // Employee lookup by email
    match /employee_lookup/{email} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}